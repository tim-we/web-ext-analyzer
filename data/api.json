{"action.disable":{"chrome":true,"description":"Disables the browser action for a tab.","firefox":true,"mdn":"API:action/disable","parameters":["tabId","callback"],"permissions":["action","browser_action"],"type":"function"},"action.enable":{"chrome":true,"description":"Enables the browser action for a tab. By default, browser actions are enabled.","firefox":true,"mdn":"API:action/enable","parameters":["tabId","callback"],"permissions":["action","browser_action"],"type":"function"},"action.getBadgeBackgroundColor":{"chrome":true,"description":"Gets the background color of the browser action badge.","firefox":true,"mdn":"API:action/getBadgeBackgroundColor","parameters":["details","callback"],"permissions":["action","browser_action"],"type":"function"},"action.getBadgeText":{"chrome":true,"description":"Gets the badge text of the browser action. If no tab nor window is specified is specified, the global badge text is returned.","firefox":true,"mdn":"API:action/getBadgeText","parameters":["details","callback"],"permissions":["action","browser_action"],"type":"function"},"action.getBadgeTextColor":{"chrome":false,"description":"Gets the text color of the browser action badge.","firefox":true,"mdn":"API:action/getBadgeTextColor","parameters":["details"],"permissions":["action","browser_action"],"type":"function"},"action.getPopup":{"chrome":true,"description":"Gets the html document set as the popup for this browser action.","firefox":true,"mdn":"API:action/getPopup","parameters":["details","callback"],"permissions":["action","browser_action"],"type":"function"},"action.getTitle":{"chrome":true,"description":"Gets the title of the browser action.","firefox":true,"mdn":"API:action/getTitle","parameters":["details","callback"],"permissions":["action","browser_action"],"type":"function"},"action.getUserSettings":{"description":"Returns the user-specified settings relating to an extension's action.","parameters":["callback"],"permissions":["action","browser_action"],"type":"function"},"action.isEnabled":{"chrome":false,"description":"Checks whether the browser action is enabled.","firefox":true,"mdn":"API:action/isEnabled","parameters":["details"],"permissions":["action","browser_action"],"type":"function"},"action.onClicked":{"chrome":true,"description":"Fired when a browser action icon is clicked.  This event will not fire if the browser action has a popup.","firefox":true,"mdn":"API:action/onClicked","parameters":["tab","info"],"permissions":["action","browser_action"],"type":"event"},"action.openPopup":{"chrome":true,"description":"Opens the extension popup window in the specified window.","firefox":true,"mdn":"API:action/openPopup","parameters":["options"],"permissions":["action","browser_action"],"type":"function"},"action.setBadgeBackgroundColor":{"chrome":true,"description":"Sets the background color for the badge.","firefox":true,"mdn":"API:action/setBadgeBackgroundColor","parameters":["details","callback"],"permissions":["action","browser_action"],"type":"function"},"action.setBadgeText":{"chrome":true,"description":"Sets the badge text for the browser action. The badge is displayed on top of the icon.","firefox":true,"mdn":"API:action/setBadgeText","parameters":["details","callback"],"permissions":["action","browser_action"],"type":"function"},"action.setBadgeTextColor":{"chrome":false,"description":"Sets the text color for the badge.","firefox":true,"mdn":"API:action/setBadgeTextColor","parameters":["details"],"permissions":["action","browser_action"],"type":"function"},"action.setIcon":{"chrome":true,"description":"Sets the icon for the browser action. The icon can be specified either as the path to an image file or as the pixel data from a canvas element, or as dictionary of either one of those. Either the <b>path</b> or the <b>imageData</b> property must be specified.","firefox":true,"mdn":"API:action/setIcon","parameters":["details","callback"],"permissions":["action","browser_action"],"type":"function"},"action.setPopup":{"chrome":true,"description":"Sets the html document to be opened as a popup when the user clicks on the browser action's icon.","firefox":true,"mdn":"API:action/setPopup","parameters":["details","callback"],"permissions":["action","browser_action"],"type":"function"},"action.setTitle":{"chrome":true,"description":"Sets the title of the browser action. This shows up in the tooltip.","firefox":true,"mdn":"API:action/setTitle","parameters":["details","callback"],"permissions":["action","browser_action"],"type":"function"},"activityLog.onExtensionActivity":{"description":"Receives an activityItem for each logging event.","parameters":["details"],"permissions":["activityLog"],"type":"event"},"alarms.clear":{"chrome":true,"description":"Clears the alarm with the given name.","firefox":true,"mdn":"API:alarms/clear","parameters":["name","callback"],"permissions":["alarms"],"type":"function"},"alarms.clearAll":{"chrome":true,"description":"Clears all alarms.","firefox":true,"mdn":"API:alarms/clearAll","parameters":["callback"],"permissions":["alarms"],"type":"function"},"alarms.create":{"chrome":true,"description":"Creates an alarm. After the delay is expired, the onAlarm event is fired. If there is another alarm with the same name (or no name if none is specified), it will be cancelled and replaced by this alarm.","firefox":true,"mdn":"API:alarms/create","parameters":["name","alarmInfo"],"permissions":["alarms"],"type":"function"},"alarms.get":{"chrome":true,"description":"Retrieves details about the specified alarm.","firefox":true,"mdn":"API:alarms/get","parameters":["name","callback"],"permissions":["alarms"],"type":"function"},"alarms.getAll":{"chrome":true,"description":"Gets an array of all the alarms.","firefox":true,"mdn":"API:alarms/getAll","parameters":["callback"],"permissions":["alarms"],"type":"function"},"alarms.onAlarm":{"chrome":true,"description":"Fired when an alarm has expired. Useful for transient background pages.","firefox":true,"mdn":"API:alarms/onAlarm","parameters":["name"],"permissions":["alarms"],"type":"event"},"bookmarks.create":{"chrome":true,"description":"Creates a bookmark or folder under the specified parentId.  If url is NULL or missing, it will be a folder.","firefox":true,"mdn":"API:bookmarks/create","parameters":["bookmark","callback"],"permissions":["bookmarks"],"type":"function"},"bookmarks.get":{"chrome":true,"description":"Retrieves the specified BookmarkTreeNode(s).","firefox":true,"mdn":"API:bookmarks/get","parameters":["idOrIdList","callback"],"permissions":["bookmarks"],"type":"function"},"bookmarks.getChildren":{"chrome":true,"description":"Retrieves the children of the specified BookmarkTreeNode id.","firefox":true,"mdn":"API:bookmarks/getChildren","parameters":["id","callback"],"permissions":["bookmarks"],"type":"function"},"bookmarks.getRecent":{"chrome":true,"description":"Retrieves the recently added bookmarks.","firefox":true,"mdn":"API:bookmarks/getRecent","parameters":["numberOfItems","callback"],"permissions":["bookmarks"],"type":"function"},"bookmarks.getSubTree":{"chrome":true,"description":"Retrieves part of the Bookmarks hierarchy, starting at the specified node.","firefox":true,"mdn":"API:bookmarks/getSubTree","parameters":["id","callback"],"permissions":["bookmarks"],"type":"function"},"bookmarks.getTree":{"chrome":true,"description":"Retrieves the entire Bookmarks hierarchy.","firefox":true,"mdn":"API:bookmarks/getTree","parameters":["callback"],"permissions":["bookmarks"],"type":"function"},"bookmarks.move":{"chrome":true,"description":"Moves the specified BookmarkTreeNode to the provided location.","firefox":true,"mdn":"API:bookmarks/move","parameters":["id","destination","callback"],"permissions":["bookmarks"],"type":"function"},"bookmarks.onChanged":{"chrome":true,"description":"Fired when a bookmark or folder changes.  <b>Note:</b> Currently, only title and url changes trigger this.","firefox":true,"mdn":"API:bookmarks/onChanged","parameters":["id","changeInfo"],"permissions":["bookmarks"],"type":"event"},"bookmarks.onChildrenReordered":{"chrome":true,"description":"Fired when the children of a folder have changed their order due to the order being sorted in the UI.  This is not called as a result of a move().","firefox":false,"mdn":"API:bookmarks/onChildrenReordered","parameters":["id","reorderInfo"],"permissions":["bookmarks"],"type":"event"},"bookmarks.onCreated":{"chrome":true,"description":"Fired when a bookmark or folder is created.","firefox":true,"mdn":"API:bookmarks/onCreated","parameters":["id","bookmark"],"permissions":["bookmarks"],"type":"event"},"bookmarks.onImportBegan":{"chrome":true,"description":"Fired when a bookmark import session is begun.  Expensive observers should ignore onCreated updates until onImportEnded is fired.  Observers should still handle other notifications immediately.","firefox":false,"mdn":"API:bookmarks/onImportBegan","parameters":[],"permissions":["bookmarks"],"type":"event"},"bookmarks.onImportEnded":{"chrome":true,"description":"Fired when a bookmark import session is ended.","firefox":false,"mdn":"API:bookmarks/onImportEnded","parameters":[],"permissions":["bookmarks"],"type":"event"},"bookmarks.onMoved":{"chrome":true,"description":"Fired when a bookmark or folder is moved to a different parent folder.","firefox":true,"mdn":"API:bookmarks/onMoved","parameters":["id","moveInfo"],"permissions":["bookmarks"],"type":"event"},"bookmarks.onRemoved":{"chrome":true,"description":"Fired when a bookmark or folder is removed.  When a folder is removed recursively, a single notification is fired for the folder, and none for its contents.","firefox":true,"mdn":"API:bookmarks/onRemoved","parameters":["id","removeInfo"],"permissions":["bookmarks"],"type":"event"},"bookmarks.remove":{"chrome":true,"description":"Removes a bookmark or an empty bookmark folder.","firefox":true,"mdn":"API:bookmarks/remove","parameters":["id","callback"],"permissions":["bookmarks"],"type":"function"},"bookmarks.removeTree":{"chrome":true,"description":"Recursively removes a bookmark folder.","firefox":true,"mdn":"API:bookmarks/removeTree","parameters":["id","callback"],"permissions":["bookmarks"],"type":"function"},"bookmarks.search":{"chrome":true,"description":"Searches for BookmarkTreeNodes matching the given query. Queries specified with an object produce BookmarkTreeNodes matching all specified properties.","firefox":true,"mdn":"API:bookmarks/search","parameters":["query","callback"],"permissions":["bookmarks"],"type":"function"},"bookmarks.update":{"chrome":true,"description":"Updates the properties of a bookmark or folder. Specify only the properties that you want to change; unspecified properties will be left unchanged.  <b>Note:</b> Currently, only 'title' and 'url' are supported.","firefox":true,"mdn":"API:bookmarks/update","parameters":["id","changes","callback"],"permissions":["bookmarks"],"type":"function"},"browsingData.remove":{"chrome":true,"description":"Clears various types of browsing data stored in a user's profile.","firefox":true,"mdn":"API:browsingData/remove","parameters":["options","dataToRemove","callback"],"permissions":["browsingData"],"type":"function"},"browsingData.removeAppcache":{"description":"Clears websites' appcache data.","parameters":["options","callback"],"permissions":["browsingData"],"type":"function"},"browsingData.removeCache":{"chrome":true,"description":"Clears the browser's cache.","firefox":true,"mdn":"API:browsingData/removeCache","parameters":["options","callback"],"permissions":["browsingData"],"type":"function"},"browsingData.removeCookies":{"chrome":true,"description":"Clears the browser's cookies and server-bound certificates modified within a particular timeframe.","firefox":true,"mdn":"API:browsingData/removeCookies","parameters":["options","callback"],"permissions":["browsingData"],"type":"function"},"browsingData.removeDownloads":{"chrome":true,"description":"Clears the browser's list of downloaded files (<em>not</em> the downloaded files themselves).","firefox":true,"mdn":"API:browsingData/removeDownloads","parameters":["options","callback"],"permissions":["browsingData"],"type":"function"},"browsingData.removeFileSystems":{"description":"Clears websites' file system data.","parameters":["options","callback"],"permissions":["browsingData"],"type":"function"},"browsingData.removeFormData":{"chrome":true,"description":"Clears the browser's stored form data (autofill).","firefox":true,"mdn":"API:browsingData/removeFormData","parameters":["options","callback"],"permissions":["browsingData"],"type":"function"},"browsingData.removeHistory":{"chrome":true,"description":"Clears the browser's history.","firefox":true,"mdn":"API:browsingData/removeHistory","parameters":["options","callback"],"permissions":["browsingData"],"type":"function"},"browsingData.removeIndexedDB":{"description":"Clears websites' IndexedDB data.","parameters":["options","callback"],"permissions":["browsingData"],"type":"function"},"browsingData.removeLocalStorage":{"chrome":true,"description":"Clears websites' local storage data.","firefox":true,"mdn":"API:browsingData/removeLocalStorage","parameters":["options","callback"],"permissions":["browsingData"],"type":"function"},"browsingData.removePasswords":{"chrome":true,"description":"Clears the browser's stored passwords.","firefox":true,"mdn":"API:browsingData/removePasswords","parameters":["options","callback"],"permissions":["browsingData"],"type":"function"},"browsingData.removePluginData":{"chrome":true,"description":"Clears plugins' data.","firefox":true,"mdn":"API:browsingData/removePluginData","parameters":["options","callback"],"permissions":["browsingData"],"type":"function"},"browsingData.removeWebSQL":{"description":"Clears websites' WebSQL data.","parameters":["options","callback"],"permissions":["browsingData"],"type":"function"},"browsingData.settings":{"chrome":true,"description":"Reports which types of data are currently selected in the 'Clear browsing data' settings UI.  Note: some of the data types included in this API are not available in the settings UI, and some UI settings control more than one data type listed here.","firefox":true,"mdn":"API:browsingData/settings","parameters":["callback"],"permissions":["browsingData"],"type":"function"},"captivePortal.getLastChecked":{"chrome":false,"description":"Returns the time difference between NOW and the last time a request was completed in milliseconds.","firefox":true,"mdn":"API:captivePortal/getLastChecked","parameters":[],"permissions":["captivePortal"],"type":"function"},"captivePortal.getState":{"chrome":false,"description":"Returns the current portal state, one of `unknown`, `not_captive`, `unlocked_portal`, `locked_portal`.","firefox":true,"mdn":"API:captivePortal/getState","parameters":[],"permissions":["captivePortal"],"type":"function"},"captivePortal.onConnectivityAvailable":{"chrome":false,"description":"This notification will be emitted when the captive portal service has determined that we can connect to the internet. The service will pass either `captive` if there is an unlocked captive portal present, or `clear` if no captive portal was detected.","firefox":true,"mdn":"API:captivePortal/onConnectivityAvailable","parameters":["status"],"permissions":["captivePortal"],"type":"event"},"captivePortal.onStateChanged":{"chrome":false,"description":"Fired when the captive portal state changes.","firefox":true,"mdn":"API:captivePortal/onStateChanged","parameters":["details"],"permissions":["captivePortal"],"type":"event"},"clipboard.setImageData":{"chrome":false,"description":"Copy an image to the clipboard. The image is re-encoded before it is written to the clipboard. If the image is invalid, the clipboard is not modified.","firefox":true,"mdn":"API:clipboard/setImageData","parameters":["imageData","imageType"],"permissions":["clipboardWrite"],"type":"function"},"commands.getAll":{"chrome":true,"description":"Returns all the registered extension commands for this extension and their shortcut (if active).","firefox":true,"mdn":"API:commands/getAll","parameters":["callback"],"permissions":["commands"],"type":"function"},"commands.onChanged":{"description":"Fired when a registered command's shortcut is changed.","parameters":["changeInfo"],"permissions":["commands"],"type":"event"},"commands.onCommand":{"chrome":true,"description":"Fired when a registered command is activated using a keyboard shortcut.","firefox":true,"mdn":"API:commands/onCommand","parameters":["command"],"permissions":["commands"],"type":"event"},"commands.reset":{"chrome":false,"description":"Reset a command's details to what is specified in the manifest.","firefox":true,"mdn":"API:commands/reset","parameters":["name"],"permissions":["commands"],"type":"function"},"commands.update":{"chrome":false,"description":"Update the details of an already defined command.","firefox":true,"mdn":"API:commands/update","parameters":["detail"],"permissions":["commands"],"type":"function"},"contentScripts.register":{"chrome":false,"description":"Register a content script programmatically","firefox":true,"mdn":"API:contentScripts/register","parameters":["contentScriptOptions"],"permissions":[],"type":"function"},"contextualIdentities.create":{"chrome":false,"description":"Creates a contextual identity with the given data.","firefox":true,"mdn":"API:contextualIdentities/create","parameters":["details"],"permissions":["contextualIdentities"],"type":"function"},"contextualIdentities.get":{"chrome":false,"description":"Retrieves information about a single contextual identity.","firefox":true,"mdn":"API:contextualIdentities/get","parameters":["cookieStoreId"],"permissions":["contextualIdentities"],"type":"function"},"contextualIdentities.onCreated":{"chrome":false,"description":"Fired when a new container is created.","firefox":true,"mdn":"API:contextualIdentities/onCreated","parameters":["changeInfo"],"permissions":["contextualIdentities"],"type":"event"},"contextualIdentities.onRemoved":{"chrome":false,"description":"Fired when a container is removed.","firefox":true,"mdn":"API:contextualIdentities/onRemoved","parameters":["changeInfo"],"permissions":["contextualIdentities"],"type":"event"},"contextualIdentities.onUpdated":{"chrome":false,"description":"Fired when a container is updated.","firefox":true,"mdn":"API:contextualIdentities/onUpdated","parameters":["changeInfo"],"permissions":["contextualIdentities"],"type":"event"},"contextualIdentities.query":{"chrome":false,"description":"Retrieves all contextual identities","firefox":true,"mdn":"API:contextualIdentities/query","parameters":["details"],"permissions":["contextualIdentities"],"type":"function"},"contextualIdentities.remove":{"chrome":false,"description":"Deletes a contetual identity by its cookie Store ID.","firefox":true,"mdn":"API:contextualIdentities/remove","parameters":["cookieStoreId"],"permissions":["contextualIdentities"],"type":"function"},"contextualIdentities.update":{"chrome":false,"description":"Updates a contextual identity with the given data.","firefox":true,"mdn":"API:contextualIdentities/update","parameters":["cookieStoreId","details"],"permissions":["contextualIdentities"],"type":"function"},"cookies.get":{"chrome":true,"description":"Retrieves information about a single cookie. If more than one cookie of the same name exists for the given URL, the one with the longest path will be returned. For cookies with the same path length, the cookie with the earliest creation time will be returned.","firefox":true,"mdn":"API:cookies/get","parameters":["details","callback"],"permissions":["cookies"],"type":"function"},"cookies.getAll":{"chrome":true,"description":"Retrieves all cookies from a single cookie store that match the given information.  The cookies returned will be sorted, with those with the longest path first.  If multiple cookies have the same path length, those with the earliest creation time will be first.","firefox":true,"mdn":"API:cookies/getAll","parameters":["details","callback"],"permissions":["cookies"],"type":"function"},"cookies.getAllCookieStores":{"chrome":true,"description":"Lists all existing cookie stores.","firefox":true,"mdn":"API:cookies/getAllCookieStores","parameters":["callback"],"permissions":["cookies"],"type":"function"},"cookies.onChanged":{"chrome":true,"description":"Fired when a cookie is set or removed. As a special case, note that updating a cookie's properties is implemented as a two step process: the cookie to be updated is first removed entirely, generating a notification with \"cause\" of \"overwrite\" .  Afterwards, a new cookie is written with the updated values, generating a second notification with \"cause\" \"explicit\".","firefox":true,"mdn":"API:cookies/onChanged","parameters":["changeInfo"],"permissions":["cookies"],"type":"event"},"cookies.remove":{"chrome":true,"description":"Deletes a cookie by name.","firefox":true,"mdn":"API:cookies/remove","parameters":["details","callback"],"permissions":["cookies"],"type":"function"},"cookies.set":{"chrome":true,"description":"Sets a cookie with the given cookie data; may overwrite equivalent cookies if they exist.","firefox":true,"mdn":"API:cookies/set","parameters":["details","callback"],"permissions":["cookies"],"type":"function"},"declarativeNetRequest.getAvailableStaticRuleCount":{"chrome":true,"description":"Returns the remaining number of static rules an extension can enable","firefox":true,"mdn":"API:declarativeNetRequest/getAvailableStaticRuleCount","parameters":["callback"],"permissions":["declarativeNetRequest","declarativeNetRequestWithHostAccess"],"type":"function"},"declarativeNetRequest.getDynamicRules":{"chrome":true,"description":"Returns the current set of dynamic rules for the extension.","firefox":true,"mdn":"API:declarativeNetRequest/getDynamicRules","parameters":["callback"],"permissions":["declarativeNetRequest","declarativeNetRequestWithHostAccess"],"type":"function"},"declarativeNetRequest.getEnabledRulesets":{"chrome":true,"description":"Returns the ids for the current set of enabled static rulesets.","firefox":true,"mdn":"API:declarativeNetRequest/getEnabledRulesets","parameters":["callback"],"permissions":["declarativeNetRequest","declarativeNetRequestWithHostAccess"],"type":"function"},"declarativeNetRequest.getSessionRules":{"chrome":true,"description":"Returns the current set of session scoped rules for the extension.","firefox":true,"mdn":"API:declarativeNetRequest/getSessionRules","parameters":["callback"],"permissions":["declarativeNetRequest","declarativeNetRequestWithHostAccess"],"type":"function"},"declarativeNetRequest.isRegexSupported":{"chrome":true,"description":"Checks if the given regular expression will be supported as a 'regexFilter' rule condition.","firefox":true,"mdn":"API:declarativeNetRequest/isRegexSupported","parameters":["regexOptions","callback"],"permissions":["declarativeNetRequest","declarativeNetRequestWithHostAccess"],"type":"function"},"declarativeNetRequest.testMatchOutcome":{"chrome":true,"description":"Checks if any of the extension's declarativeNetRequest rules would match a hypothetical request.","firefox":true,"mdn":"API:declarativeNetRequest/testMatchOutcome","parameters":["request","options","callback"],"permissions":["declarativeNetRequest","declarativeNetRequestWithHostAccess","declarativeNetRequestFeedback"],"type":"function"},"declarativeNetRequest.updateDynamicRules":{"chrome":true,"description":"Modifies the current set of dynamic rules for the extension. The rules with IDs listed in options.removeRuleIds are first removed, and then the rules given in options.addRules are added. These rules are persisted across browser sessions and extension updates.","firefox":true,"mdn":"API:declarativeNetRequest/updateDynamicRules","parameters":["options","callback"],"permissions":["declarativeNetRequest","declarativeNetRequestWithHostAccess"],"type":"function"},"declarativeNetRequest.updateEnabledRulesets":{"chrome":true,"description":"Returns the ids for the current set of enabled static rulesets.","firefox":true,"mdn":"API:declarativeNetRequest/updateEnabledRulesets","parameters":["updateRulesetOptions","callback"],"permissions":["declarativeNetRequest","declarativeNetRequestWithHostAccess"],"type":"function"},"declarativeNetRequest.updateSessionRules":{"chrome":true,"description":"Modifies the current set of session scoped rules for the extension. The rules with IDs listed in options.removeRuleIds are first removed, and then the rules given in options.addRules are added. These rules are not persisted across sessions and are backed in memory.","firefox":true,"mdn":"API:declarativeNetRequest/updateSessionRules","parameters":["options","callback"],"permissions":["declarativeNetRequest","declarativeNetRequestWithHostAccess"],"type":"function"},"devtools.inspectedWindow.eval":{"description":"Evaluates a JavaScript expression in the context of the main frame of the inspected page. The expression must evaluate to a JSON-compliant object, otherwise an exception is thrown. The eval function can report either a DevTools-side error or a JavaScript exception that occurs during evaluation. In either case, the <code>result</code> parameter of the callback is <code>undefined</code>. In the case of a DevTools-side error, the <code>isException</code> parameter is non-null and has <code>isError</code> set to true and <code>code</code> set to an error code. In the case of a JavaScript error, <code>isException</code> is set to true and <code>value</code> is set to the string value of thrown object.","parameters":["expression","options","callback"],"permissions":[],"type":"function"},"devtools.inspectedWindow.getResources":{"description":"Retrieves the list of resources from the inspected page.","parameters":["callback"],"permissions":[],"type":"function"},"devtools.inspectedWindow.onResourceAdded":{"description":"Fired when a new resource is added to the inspected page.","parameters":["resource"],"permissions":[],"type":"event"},"devtools.inspectedWindow.onResourceContentCommitted":{"description":"Fired when a new revision of the resource is committed (e.g. user saves an edited version of the resource in the Developer Tools).","parameters":["resource","content"],"permissions":[],"type":"event"},"devtools.inspectedWindow.reload":{"description":"Reloads the inspected page.","parameters":["reloadOptions"],"permissions":[],"type":"function"},"devtools.network.getHAR":{"description":"Returns HAR log that contains all known network requests.","parameters":["callback"],"permissions":[],"type":"function"},"devtools.network.onNavigated":{"description":"Fired when the inspected window navigates to a new page.","parameters":["url"],"permissions":[],"type":"event"},"devtools.network.onRequestFinished":{"description":"Fired when a network request is finished and all request data are available.","parameters":["request"],"permissions":[],"type":"event"},"devtools.panels.create":{"description":"Creates an extension panel.","parameters":["title","iconPath","pagePath","callback"],"permissions":[],"type":"function"},"devtools.panels.onThemeChanged":{"description":"Fired when the devtools theme changes.","parameters":["themeName"],"permissions":[],"type":"event"},"devtools.panels.openResource":{"description":"Requests DevTools to open a URL in a Developer Tools panel.","parameters":["url","lineNumber","callback"],"permissions":[],"type":"function"},"devtools.panels.setOpenResourceHandler":{"description":"Specifies the function to be called when the user clicks a resource link in the Developer Tools window. To unset the handler, either call the method with no parameters or pass null as the parameter.","parameters":["callback"],"permissions":[],"type":"function"},"dns.resolve":{"chrome":false,"description":"Resolves a hostname to a DNS record.","firefox":true,"mdn":"API:dns/resolve","parameters":["hostname","flags"],"permissions":["dns"],"type":"function"},"downloads.acceptDanger":{"chrome":true,"description":"Prompt the user to either accept or cancel a dangerous download. <code>acceptDanger()</code> does not automatically accept dangerous downloads.","firefox":false,"mdn":"API:downloads/acceptDanger","parameters":["downloadId","callback"],"permissions":["downloads"],"type":"function"},"downloads.cancel":{"chrome":true,"description":"Cancel a download. When <code>callback</code> is run, the download is cancelled, completed, interrupted or doesn't exist anymore.","firefox":true,"mdn":"API:downloads/cancel","parameters":["downloadId","callback"],"permissions":["downloads"],"type":"function"},"downloads.download":{"chrome":true,"description":"Download a URL. If the URL uses the HTTP[S] protocol, then the request will include all cookies currently set for its hostname. If both <code>filename</code> and <code>saveAs</code> are specified, then the Save As dialog will be displayed, pre-populated with the specified <code>filename</code>. If the download started successfully, <code>callback</code> will be called with the new <a href='#type-DownloadItem'>DownloadItem</a>'s <code>downloadId</code>. If there was an error starting the download, then <code>callback</code> will be called with <code>downloadId=undefined</code> and <a href='extension.html#property-lastError'>chrome.extension.lastError</a> will contain a descriptive string. The error strings are not guaranteed to remain backwards compatible between releases. You must not parse it.","firefox":true,"mdn":"API:downloads/download","parameters":["options","callback"],"permissions":["downloads"],"type":"function"},"downloads.drag":{"chrome":false,"description":"Initiate dragging the file to another application.","firefox":false,"mdn":"API:downloads/drag","parameters":["downloadId"],"permissions":["downloads"],"type":"function"},"downloads.erase":{"chrome":true,"description":"Erase matching <a href='#type-DownloadItem'>DownloadItems</a> from history","firefox":true,"mdn":"API:downloads/erase","parameters":["query","callback"],"permissions":["downloads"],"type":"function"},"downloads.getFileIcon":{"chrome":true,"description":"Retrieve an icon for the specified download. For new downloads, file icons are available after the <a href='#event-onCreated'>onCreated</a> event has been received. The image returned by this function while a download is in progress may be different from the image returned after the download is complete. Icon retrieval is done by querying the underlying operating system or toolkit depending on the platform. The icon that is returned will therefore depend on a number of factors including state of the download, platform, registered file types and visual theme. If a file icon cannot be determined, <a href='extension.html#property-lastError'>chrome.extension.lastError</a> will contain an error message.","firefox":true,"mdn":"API:downloads/getFileIcon","parameters":["downloadId","options","callback"],"permissions":["downloads"],"type":"function"},"downloads.onChanged":{"chrome":true,"description":"When any of a <a href='#type-DownloadItem'>DownloadItem</a>'s properties except <code>bytesReceived</code> changes, this event fires with the <code>downloadId</code> and an object containing the properties that changed.","firefox":true,"mdn":"API:downloads/onChanged","parameters":["downloadDelta"],"permissions":["downloads"],"type":"event"},"downloads.onCreated":{"chrome":true,"description":"This event fires with the <a href='#type-DownloadItem'>DownloadItem</a> object when a download begins.","firefox":true,"mdn":"API:downloads/onCreated","parameters":["downloadItem"],"permissions":["downloads"],"type":"event"},"downloads.onErased":{"chrome":true,"description":"Fires with the <code>downloadId</code> when a download is erased from history.","firefox":true,"mdn":"API:downloads/onErased","parameters":["downloadId"],"permissions":["downloads"],"type":"event"},"downloads.open":{"chrome":true,"description":"Open the downloaded file.","firefox":true,"mdn":"API:downloads/open","parameters":["downloadId","callback"],"permissions":["downloads","downloads.open"],"type":"function"},"downloads.pause":{"chrome":true,"description":"Pause the download. If the request was successful the download is in a paused state. Otherwise <a href='extension.html#property-lastError'>chrome.extension.lastError</a> contains an error message. The request will fail if the download is not active.","firefox":true,"mdn":"API:downloads/pause","parameters":["downloadId","callback"],"permissions":["downloads"],"type":"function"},"downloads.removeFile":{"chrome":true,"firefox":true,"mdn":"API:downloads/removeFile","parameters":["downloadId","callback"],"permissions":["downloads"],"type":"function"},"downloads.resume":{"chrome":true,"description":"Resume a paused download. If the request was successful the download is in progress and unpaused. Otherwise <a href='extension.html#property-lastError'>chrome.extension.lastError</a> contains an error message. The request will fail if the download is not active.","firefox":true,"mdn":"API:downloads/resume","parameters":["downloadId","callback"],"permissions":["downloads"],"type":"function"},"downloads.search":{"chrome":true,"description":"Find <a href='#type-DownloadItem'>DownloadItems</a>. Set <code>query</code> to the empty object to get all <a href='#type-DownloadItem'>DownloadItems</a>. To get a specific <a href='#type-DownloadItem'>DownloadItem</a>, set only the <code>id</code> field.","firefox":true,"mdn":"API:downloads/search","parameters":["query","callback"],"permissions":["downloads"],"type":"function"},"downloads.setShelfEnabled":{"chrome":true,"firefox":false,"mdn":"API:downloads/setShelfEnabled","parameters":["enabled"],"permissions":["downloads"],"type":"function"},"downloads.show":{"chrome":true,"description":"Show the downloaded file in its folder in a file manager.","firefox":true,"mdn":"API:downloads/show","parameters":["downloadId","callback"],"permissions":["downloads"],"type":"function"},"downloads.showDefaultFolder":{"chrome":true,"firefox":true,"mdn":"API:downloads/showDefaultFolder","parameters":[],"permissions":["downloads"],"type":"function"},"extension.getBackgroundPage":{"chrome":true,"description":"Returns the JavaScript 'window' object for the background page running inside the current extension. Returns null if the extension has no background page.","firefox":true,"mdn":"API:extension/getBackgroundPage","parameters":[],"permissions":[],"type":"function"},"extension.getURL":{"chrome":true,"description":"Converts a relative path within an extension install directory to a fully-qualified URL.","firefox":true,"mdn":"API:extension/getURL","parameters":["path"],"permissions":[],"type":"function"},"extension.getViews":{"chrome":true,"description":"Returns an array of the JavaScript 'window' objects for each of the pages running inside the current extension.","firefox":true,"mdn":"API:extension/getViews","parameters":["fetchProperties"],"permissions":[],"type":"function"},"extension.isAllowedFileSchemeAccess":{"chrome":true,"description":"Retrieves the state of the extension's access to the 'file://' scheme (as determined by the user-controlled 'Allow access to File URLs' checkbox.","firefox":true,"mdn":"API:extension/isAllowedFileSchemeAccess","parameters":["callback"],"permissions":[],"type":"function"},"extension.isAllowedIncognitoAccess":{"chrome":true,"description":"Retrieves the state of the extension's access to Incognito-mode (as determined by the user-controlled 'Allowed in Incognito' checkbox.","firefox":true,"mdn":"API:extension/isAllowedIncognitoAccess","parameters":["callback"],"permissions":[],"type":"function"},"extension.onRequest":{"chrome":true,"description":"Fired when a request is sent from either an extension process or a content script.","firefox":false,"mdn":"API:extension/onRequest","parameters":["request","sender","sendResponse"],"permissions":[],"type":"event"},"extension.onRequestExternal":{"chrome":true,"description":"Fired when a request is sent from another extension.","firefox":false,"mdn":"API:extension/onRequestExternal","parameters":["request","sender","sendResponse"],"permissions":[],"type":"event"},"extension.setUpdateUrlData":{"chrome":true,"description":"Sets the value of the ap CGI parameter used in the extension's update URL.  This value is ignored for extensions that are hosted in the browser vendor's store.","firefox":false,"mdn":"API:extension/setUpdateUrlData","parameters":["data"],"permissions":[],"type":"function"},"find.find":{"chrome":false,"description":"Search for text in document and store found ranges in array, in document order.","firefox":true,"mdn":"API:find/find","parameters":["queryphrase","params"],"permissions":["find"],"type":"function"},"find.highlightResults":{"chrome":false,"description":"Highlight a range","firefox":true,"mdn":"API:find/highlightResults","parameters":["params"],"permissions":["find"],"type":"function"},"find.removeHighlighting":{"chrome":false,"description":"Remove all highlighting from previous searches.","firefox":true,"mdn":"API:find/removeHighlighting","parameters":["tabId"],"permissions":["find"],"type":"function"},"geckoProfiler.dumpProfileToFile":{"description":"Gathers the profile data from the current profiling session, and writes it to disk. The returned promise resolves to a path that locates the created file.","parameters":["fileName"],"permissions":["geckoProfiler"],"type":"function"},"geckoProfiler.getProfile":{"description":"Gathers the profile data from the current profiling session.","parameters":[],"permissions":["geckoProfiler"],"type":"function"},"geckoProfiler.getProfileAsArrayBuffer":{"description":"Gathers the profile data from the current profiling session. The returned promise resolves to an array buffer that contains a JSON string.","parameters":[],"permissions":["geckoProfiler"],"type":"function"},"geckoProfiler.getProfileAsGzippedArrayBuffer":{"description":"Gathers the profile data from the current profiling session. The returned promise resolves to an array buffer that contains a gzipped JSON string.","parameters":[],"permissions":["geckoProfiler"],"type":"function"},"geckoProfiler.getSymbols":{"description":"Gets the debug symbols for a particular library.","parameters":["debugName","breakpadId"],"permissions":["geckoProfiler"],"type":"function"},"geckoProfiler.onRunning":{"description":"Fires when the profiler starts/stops running.","parameters":["isRunning"],"permissions":["geckoProfiler"],"type":"event"},"geckoProfiler.pause":{"description":"Pauses the profiler, keeping any profile data that is already written.","parameters":[],"permissions":["geckoProfiler"],"type":"function"},"geckoProfiler.resume":{"description":"Resumes the profiler with the settings that were initially used to start it.","parameters":[],"permissions":["geckoProfiler"],"type":"function"},"geckoProfiler.start":{"description":"Starts the profiler with the specified settings.","parameters":["settings"],"permissions":["geckoProfiler"],"type":"function"},"geckoProfiler.stop":{"description":"Stops the profiler and discards any captured profile data.","parameters":[],"permissions":["geckoProfiler"],"type":"function"},"history.addUrl":{"chrome":true,"description":"Adds a URL to the history with a default visitTime of the current time and a default transition type of \"link\".","firefox":true,"mdn":"API:history/addUrl","parameters":["details","callback"],"permissions":["history"],"type":"function"},"history.deleteAll":{"chrome":true,"description":"Deletes all items from the history.","firefox":true,"mdn":"API:history/deleteAll","parameters":["callback"],"permissions":["history"],"type":"function"},"history.deleteRange":{"chrome":true,"description":"Removes all items within the specified date range from the history.  Pages will not be removed from the history unless all visits fall within the range.","firefox":true,"mdn":"API:history/deleteRange","parameters":["range","callback"],"permissions":["history"],"type":"function"},"history.deleteUrl":{"chrome":true,"description":"Removes all occurrences of the given URL from the history.","firefox":true,"mdn":"API:history/deleteUrl","parameters":["details","callback"],"permissions":["history"],"type":"function"},"history.getVisits":{"chrome":true,"description":"Retrieves information about visits to a URL.","firefox":true,"mdn":"API:history/getVisits","parameters":["details","callback"],"permissions":["history"],"type":"function"},"history.onTitleChanged":{"chrome":false,"description":"Fired when the title of a URL is changed in the browser history.","firefox":true,"mdn":"API:history/onTitleChanged","parameters":["changed"],"permissions":["history"],"type":"event"},"history.onVisitRemoved":{"chrome":true,"description":"Fired when one or more URLs are removed from the history service.  When all visits have been removed the URL is purged from history.","firefox":true,"mdn":"API:history/onVisitRemoved","parameters":["removed"],"permissions":["history"],"type":"event"},"history.onVisited":{"chrome":true,"description":"Fired when a URL is visited, providing the HistoryItem data for that URL.  This event fires before the page has loaded.","firefox":true,"mdn":"API:history/onVisited","parameters":["result"],"permissions":["history"],"type":"event"},"history.search":{"chrome":true,"description":"Searches the history for the last visit time of each page matching the query.","firefox":true,"mdn":"API:history/search","parameters":["query","callback"],"permissions":["history"],"type":"function"},"i18n.detectLanguage":{"chrome":true,"description":"Detects the language of the provided text using CLD.","firefox":true,"mdn":"API:i18n/detectLanguage","parameters":["text","callback"],"permissions":[],"type":"function"},"i18n.getAcceptLanguages":{"chrome":true,"description":"Gets the accept-languages of the browser. This is different from the locale used by the browser; to get the locale, use i18n.getUILanguage.","firefox":true,"mdn":"API:i18n/getAcceptLanguages","parameters":["callback"],"permissions":[],"type":"function"},"i18n.getMessage":{"chrome":true,"description":"Gets the localized string for the specified message. If the message is missing, this method returns an empty string (''). If the format of the <code>getMessage()</code> call is wrong — for example, <em>messageName</em> is not a string or the <em>substitutions</em> array has more than 9 elements — this method returns <code>undefined</code>.","firefox":true,"mdn":"API:i18n/getMessage","parameters":["messageName","substitutions"],"permissions":[],"type":"function"},"i18n.getUILanguage":{"chrome":true,"description":"Gets the browser UI language of the browser. This is different from i18n.getAcceptLanguages which returns the preferred user languages.","firefox":true,"mdn":"API:i18n/getUILanguage","parameters":[],"permissions":[],"type":"function"},"identity.getAccounts":{"description":"Retrieves a list of AccountInfo objects describing the accounts present on the profile.","parameters":["callback"],"permissions":["identity"],"type":"function"},"identity.getAuthToken":{"description":"Gets an OAuth2 access token using the client ID and scopes specified in the oauth2 section of manifest.json.","parameters":["details","callback"],"permissions":["identity"],"type":"function"},"identity.getProfileUserInfo":{"description":"Retrieves email address and obfuscated gaia id of the user signed into a profile.","parameters":["callback"],"permissions":["identity"],"type":"function"},"identity.getRedirectURL":{"chrome":true,"description":"Generates a redirect URL to be used in |launchWebAuthFlow|.","firefox":true,"mdn":"API:identity/getRedirectURL","parameters":["path"],"permissions":["identity"],"type":"function"},"identity.launchWebAuthFlow":{"chrome":true,"description":"Starts an auth flow at the specified URL.","firefox":true,"mdn":"API:identity/launchWebAuthFlow","parameters":["details","callback"],"permissions":["identity"],"type":"function"},"identity.onSignInChanged":{"description":"Fired when signin state changes for an account on the user's profile.","parameters":["account","signedIn"],"permissions":["identity"],"type":"event"},"identity.removeCachedAuthToken":{"description":"Removes an OAuth2 access token from the Identity API's token cache.","parameters":["details","callback"],"permissions":["identity"],"type":"function"},"idle.onStateChanged":{"chrome":true,"description":"Fired when the system changes to an active or idle state. The event fires with \"idle\" if the the user has not generated any input for a specified number of seconds, and \"active\" when the user generates input on an idle system.","firefox":true,"mdn":"API:idle/onStateChanged","parameters":["newState"],"permissions":["idle"],"type":"event"},"idle.queryState":{"chrome":true,"description":"Returns \"idle\" if the user has not generated any input for a specified number of seconds, or \"active\" otherwise.","firefox":true,"mdn":"API:idle/queryState","parameters":["detectionIntervalInSeconds","callback"],"permissions":["idle"],"type":"function"},"idle.setDetectionInterval":{"chrome":true,"description":"Sets the interval, in seconds, used to determine when the system is in an idle state for onStateChanged events. The default interval is 60 seconds.","firefox":true,"mdn":"API:idle/setDetectionInterval","parameters":["intervalInSeconds"],"permissions":["idle"],"type":"function"},"management.get":{"chrome":true,"description":"Returns information about the installed extension that has the given ID.","firefox":true,"mdn":"API:management/get","parameters":["id","callback"],"permissions":["management"],"type":"function"},"management.getAll":{"chrome":true,"description":"Returns a list of information about installed extensions.","firefox":true,"mdn":"API:management/getAll","parameters":["callback"],"permissions":["management"],"type":"function"},"management.getSelf":{"chrome":true,"description":"Returns information about the calling extension. Note: This function can be used without requesting the 'management' permission in the manifest.","firefox":true,"mdn":"API:management/getSelf","parameters":["callback"],"permissions":[],"type":"function"},"management.install":{"chrome":false,"description":"Installs and enables a theme extension from the given url.","firefox":true,"mdn":"API:management/install","parameters":["options","callback"],"permissions":["management"],"type":"function"},"management.onDisabled":{"chrome":true,"description":"Fired when an addon has been disabled.","firefox":true,"mdn":"API:management/onDisabled","parameters":["info"],"permissions":["management"],"type":"event"},"management.onEnabled":{"chrome":true,"description":"Fired when an addon has been enabled.","firefox":true,"mdn":"API:management/onEnabled","parameters":["info"],"permissions":["management"],"type":"event"},"management.onInstalled":{"chrome":true,"description":"Fired when an addon has been installed.","firefox":true,"mdn":"API:management/onInstalled","parameters":["info"],"permissions":["management"],"type":"event"},"management.onUninstalled":{"chrome":true,"description":"Fired when an addon has been uninstalled.","firefox":true,"mdn":"API:management/onUninstalled","parameters":["info"],"permissions":["management"],"type":"event"},"management.setEnabled":{"chrome":true,"description":"Enables or disables the given add-on.","firefox":true,"mdn":"API:management/setEnabled","parameters":["id","enabled","callback"],"permissions":["management"],"type":"function"},"management.uninstallSelf":{"chrome":true,"description":"Uninstalls the calling extension. Note: This function can be used without requesting the 'management' permission in the manifest.","firefox":true,"mdn":"API:management/uninstallSelf","parameters":["options","callback"],"permissions":[],"type":"function"},"menus.create":{"chrome":true,"description":"Creates a new context menu item. Note that if an error occurs during creation, you may not find out until the creation callback fires (the details will be in runtime.lastError).","firefox":true,"mdn":"API:menus/create","parameters":["createProperties","callback"],"permissions":["menus"],"type":"function"},"menus.getTargetElement":{"chrome":false,"description":"Retrieve the element that was associated with a recent contextmenu event.","firefox":true,"mdn":"API:menus/getTargetElement","parameters":["targetElementId"],"permissions":["menus"],"type":"function"},"menus.onClicked":{"chrome":true,"description":"Fired when a context menu item is clicked.","firefox":true,"mdn":"API:menus/onClicked","parameters":["info","tab"],"permissions":["menus"],"type":"event"},"menus.onHidden":{"chrome":false,"description":"Fired when a menu is hidden. This event is only fired if onShown has fired before.","firefox":true,"mdn":"API:menus/onHidden","parameters":[],"permissions":["menus"],"type":"event"},"menus.onShown":{"chrome":false,"description":"Fired when a menu is shown. The extension can add, modify or remove menu items and call menus.refresh() to update the menu.","firefox":true,"mdn":"API:menus/onShown","parameters":["info","tab"],"permissions":["menus"],"type":"event"},"menus.overrideContext":{"chrome":false,"description":"Show the matching menu items from this extension instead of the default menu. This should be called during a 'contextmenu' DOM event handler, and only applies to the menu that opens after this event.","firefox":true,"mdn":"API:menus/overrideContext","parameters":["contextOptions"],"permissions":["menus","menus.overrideContext"],"type":"function"},"menus.refresh":{"chrome":false,"description":"Updates the extension items in the shown menu, including changes that have been made since the menu was shown. Has no effect if the menu is hidden. Rebuilding a shown menu is an expensive operation, only invoke this method when necessary.","firefox":true,"mdn":"API:menus/refresh","parameters":[],"permissions":["menus"],"type":"function"},"menus.remove":{"chrome":true,"description":"Removes a context menu item.","firefox":true,"mdn":"API:menus/remove","parameters":["menuItemId","callback"],"permissions":["menus"],"type":"function"},"menus.removeAll":{"chrome":true,"description":"Removes all context menu items added by this extension.","firefox":true,"mdn":"API:menus/removeAll","parameters":["callback"],"permissions":["menus"],"type":"function"},"menus.update":{"chrome":true,"description":"Updates a previously created context menu item.","firefox":true,"mdn":"API:menus/update","parameters":["id","updateProperties","callback"],"permissions":["menus"],"type":"function"},"networkStatus.getLinkInfo":{"description":"Returns the $(ref:NetworkLinkInfo} of the current network connection.","parameters":[],"permissions":["networkStatus"],"type":"function"},"networkStatus.onConnectionChanged":{"description":"Fired when the network connection state changes.","parameters":["details"],"permissions":["networkStatus"],"type":"event"},"normandyAddonStudy.endStudy":{"description":"Marks the study as ended and then uninstalls the addon.","parameters":["reason"],"permissions":["normandyAddonStudy"],"type":"function"},"normandyAddonStudy.getClientMetadata":{"description":"Returns an object with metadata about the client which may be required for constructing survey URLs.","parameters":[],"permissions":["normandyAddonStudy"],"type":"function"},"normandyAddonStudy.getStudy":{"description":"Returns a study object for the current study.","parameters":[],"permissions":["normandyAddonStudy"],"type":"function"},"normandyAddonStudy.onUnenroll":{"description":"Fired when a user unenrolls from a study but before the addon is uninstalled.","parameters":["reason"],"permissions":["normandyAddonStudy"],"type":"event"},"notifications.clear":{"chrome":true,"description":"Clears an existing notification.","firefox":true,"mdn":"API:notifications/clear","parameters":["notificationId","callback"],"permissions":["notifications"],"type":"function"},"notifications.create":{"chrome":true,"description":"Creates and displays a notification.","firefox":true,"mdn":"API:notifications/create","parameters":["notificationId","options","callback"],"permissions":["notifications"],"type":"function"},"notifications.getAll":{"chrome":true,"description":"Retrieves all the notifications.","firefox":true,"mdn":"API:notifications/getAll","parameters":["callback"],"permissions":["notifications"],"type":"function"},"notifications.getPermissionLevel":{"description":"Retrieves whether the user has enabled notifications from this app or extension.","parameters":["callback"],"permissions":["notifications"],"type":"function"},"notifications.onButtonClicked":{"chrome":true,"description":"Fired when the  user pressed a button in the notification.","firefox":false,"mdn":"API:notifications/onButtonClicked","parameters":["notificationId","buttonIndex"],"permissions":["notifications"],"type":"event"},"notifications.onClicked":{"chrome":true,"description":"Fired when the user clicked in a non-button area of the notification.","firefox":true,"mdn":"API:notifications/onClicked","parameters":["notificationId"],"permissions":["notifications"],"type":"event"},"notifications.onClosed":{"chrome":true,"description":"Fired when the notification closed, either by the system or by user action.","firefox":true,"mdn":"API:notifications/onClosed","parameters":["notificationId","byUser"],"permissions":["notifications"],"type":"event"},"notifications.onPermissionLevelChanged":{"description":"Fired when the user changes the permission level.","parameters":["level"],"permissions":["notifications"],"type":"event"},"notifications.onShowSettings":{"description":"Fired when the user clicked on a link for the app's notification settings.","parameters":[],"permissions":["notifications"],"type":"event"},"notifications.onShown":{"chrome":false,"description":"Fired when the notification is shown.","firefox":true,"mdn":"API:notifications/onShown","parameters":["notificationId"],"permissions":["notifications"],"type":"event"},"notifications.update":{"chrome":true,"description":"Updates an existing notification.","firefox":false,"mdn":"API:notifications/update","parameters":["notificationId","options","callback"],"permissions":["notifications"],"type":"function"},"omnibox.onDeleteSuggestion":{"chrome":true,"description":"User has deleted a suggested result.","firefox":true,"mdn":"API:omnibox/onDeleteSuggestion","parameters":["text"],"permissions":["omnibox"],"type":"event"},"omnibox.onInputCancelled":{"chrome":true,"description":"User has ended the keyword input session without accepting the input.","firefox":true,"mdn":"API:omnibox/onInputCancelled","parameters":[],"permissions":["omnibox"],"type":"event"},"omnibox.onInputChanged":{"chrome":true,"description":"User has changed what is typed into the omnibox.","firefox":true,"mdn":"API:omnibox/onInputChanged","parameters":["text","suggest"],"permissions":["omnibox"],"type":"event"},"omnibox.onInputEntered":{"chrome":true,"description":"User has accepted what is typed into the omnibox.","firefox":true,"mdn":"API:omnibox/onInputEntered","parameters":["text","disposition"],"permissions":["omnibox"],"type":"event"},"omnibox.onInputStarted":{"chrome":true,"description":"User has started a keyword input session by typing the extension's keyword. This is guaranteed to be sent exactly once per input session, and before any onInputChanged events.","firefox":true,"mdn":"API:omnibox/onInputStarted","parameters":[],"permissions":["omnibox"],"type":"event"},"omnibox.setDefaultSuggestion":{"chrome":true,"description":"Sets the description and styling for the default suggestion. The default suggestion is the text that is displayed in the first suggestion row underneath the URL bar.","firefox":true,"mdn":"API:omnibox/setDefaultSuggestion","parameters":["suggestion"],"permissions":["omnibox"],"type":"function"},"pageAction.getPopup":{"chrome":true,"description":"Gets the html document set as the popup for this page action.","firefox":true,"mdn":"API:pageAction/getPopup","parameters":["details","callback"],"permissions":["page_action"],"type":"function"},"pageAction.getTitle":{"chrome":true,"description":"Gets the title of the page action.","firefox":true,"mdn":"API:pageAction/getTitle","parameters":["details","callback"],"permissions":["page_action"],"type":"function"},"pageAction.hide":{"chrome":true,"description":"Hides the page action.","firefox":true,"mdn":"API:pageAction/hide","parameters":["tabId","callback"],"permissions":["page_action"],"type":"function"},"pageAction.isShown":{"chrome":false,"description":"Checks whether the page action is shown.","firefox":true,"mdn":"API:pageAction/isShown","parameters":["details"],"permissions":["page_action"],"type":"function"},"pageAction.onClicked":{"chrome":true,"description":"Fired when a page action icon is clicked.  This event will not fire if the page action has a popup.","firefox":true,"mdn":"API:pageAction/onClicked","parameters":["tab","info"],"permissions":["page_action"],"type":"event"},"pageAction.openPopup":{"chrome":false,"description":"Opens the extension page action in the active window.","firefox":true,"mdn":"API:pageAction/openPopup","parameters":[],"permissions":["page_action"],"type":"function"},"pageAction.setIcon":{"chrome":true,"description":"Sets the icon for the page action. The icon can be specified either as the path to an image file or as the pixel data from a canvas element, or as dictionary of either one of those. Either the <b>path</b> or the <b>imageData</b> property must be specified.","firefox":true,"mdn":"API:pageAction/setIcon","parameters":["details","callback"],"permissions":["page_action"],"type":"function"},"pageAction.setPopup":{"chrome":true,"description":"Sets the html document to be opened as a popup when the user clicks on the page action's icon.","firefox":true,"mdn":"API:pageAction/setPopup","parameters":["details"],"permissions":["page_action"],"type":"function"},"pageAction.setTitle":{"chrome":true,"description":"Sets the title of the page action. This is displayed in a tooltip over the page action.","firefox":true,"mdn":"API:pageAction/setTitle","parameters":["details"],"permissions":["page_action"],"type":"function"},"pageAction.show":{"chrome":true,"description":"Shows the page action. The page action is shown whenever the tab is selected.","firefox":true,"mdn":"API:pageAction/show","parameters":["tabId","callback"],"permissions":["page_action"],"type":"function"},"permissions.contains":{"chrome":true,"description":"Check if the extension has the given permissions.","firefox":true,"mdn":"API:permissions/contains","parameters":["permissions","callback"],"permissions":[],"type":"function"},"permissions.getAll":{"chrome":true,"description":"Get a list of all the extension's permissions.","firefox":true,"mdn":"API:permissions/getAll","parameters":["callback"],"permissions":[],"type":"function"},"permissions.onAdded":{"chrome":true,"description":"Fired when the extension acquires new permissions.","firefox":true,"mdn":"API:permissions/onAdded","parameters":["permissions"],"permissions":[],"type":"event"},"permissions.onRemoved":{"chrome":true,"description":"Fired when permissions are removed from the extension.","firefox":true,"mdn":"API:permissions/onRemoved","parameters":["permissions"],"permissions":[],"type":"event"},"permissions.remove":{"chrome":true,"description":"Relinquish the given permissions.","firefox":true,"mdn":"API:permissions/remove","parameters":["permissions","callback"],"permissions":[],"type":"function"},"permissions.request":{"chrome":true,"description":"Request the given permissions.","firefox":true,"mdn":"API:permissions/request","parameters":["permissions","callback"],"permissions":[],"type":"function"},"pkcs11.getModuleSlots":{"chrome":false,"description":"Enumerate a module's slots, each with their name and whether a token is present","firefox":true,"mdn":"API:pkcs11/getModuleSlots","parameters":["name"],"permissions":["pkcs11"],"type":"function"},"pkcs11.installModule":{"chrome":false,"description":"Install a PKCS#11 module with a given name","firefox":true,"mdn":"API:pkcs11/installModule","parameters":["name","flags"],"permissions":["pkcs11"],"type":"function"},"pkcs11.isModuleInstalled":{"chrome":false,"description":"checks whether a PKCS#11 module, given by name, is installed","firefox":true,"mdn":"API:pkcs11/isModuleInstalled","parameters":["name"],"permissions":["pkcs11"],"type":"function"},"pkcs11.uninstallModule":{"chrome":false,"description":"Remove an installed PKCS#11 module from firefox","firefox":true,"mdn":"API:pkcs11/uninstallModule","parameters":["name"],"permissions":["pkcs11"],"type":"function"},"proxy.onError":{"chrome":false,"description":"Notifies about errors caused by the invalid use of the proxy API.","firefox":true,"mdn":"API:proxy/onError","parameters":["error"],"permissions":["proxy"],"type":"event"},"proxy.onRequest":{"chrome":false,"description":"Fired when proxy data is needed for a request.","firefox":true,"mdn":"API:proxy/onRequest","parameters":["details"],"permissions":["proxy"],"type":"event"},"runtime.connect":{"chrome":true,"description":"Attempts to connect to connect listeners within an extension/app (such as the background page), or other extensions/apps. This is useful for content scripts connecting to their extension processes, inter-app/extension communication, and web messaging. Note that this does not connect to any listeners in a content script. Extensions may connect to content scripts embedded in tabs via tabs.connect.","firefox":true,"mdn":"API:runtime/connect","parameters":["extensionId","connectInfo"],"permissions":[],"type":"function"},"runtime.connectNative":{"chrome":true,"description":"Connects to a native application in the host machine.","firefox":true,"mdn":"API:runtime/connectNative","parameters":["application"],"permissions":["nativeMessaging"],"type":"function"},"runtime.getBackgroundPage":{"chrome":true,"description":"Retrieves the JavaScript 'window' object for the background page running inside the current extension/app. If the background page is an event page, the system will ensure it is loaded before calling the callback. If there is no background page, an error is set.","firefox":true,"mdn":"API:runtime/getBackgroundPage","parameters":["callback"],"permissions":[],"type":"function"},"runtime.getBrowserInfo":{"chrome":false,"description":"Returns information about the current browser.","firefox":true,"mdn":"API:runtime/getBrowserInfo","parameters":["callback"],"permissions":[],"type":"function"},"runtime.getFrameId":{"chrome":false,"description":"Get the frameId of any window global or frame element.","firefox":true,"mdn":"API:runtime/getFrameId","parameters":["target"],"permissions":[],"type":"function"},"runtime.getManifest":{"chrome":true,"description":"Returns details about the app or extension from the manifest. The object returned is a serialization of the full manifest file.","firefox":true,"mdn":"API:runtime/getManifest","parameters":[],"permissions":[],"type":"function"},"runtime.getPackageDirectoryEntry":{"chrome":true,"description":"Returns a DirectoryEntry for the package directory.","firefox":false,"mdn":"API:runtime/getPackageDirectoryEntry","parameters":["callback"],"permissions":[],"type":"function"},"runtime.getPlatformInfo":{"chrome":true,"description":"Returns information about the current platform.","firefox":true,"mdn":"API:runtime/getPlatformInfo","parameters":["callback"],"permissions":[],"type":"function"},"runtime.getURL":{"chrome":true,"description":"Converts a relative path within an app/extension install directory to a fully-qualified URL.","firefox":true,"mdn":"API:runtime/getURL","parameters":["path"],"permissions":[],"type":"function"},"runtime.onBrowserUpdateAvailable":{"chrome":true,"description":"Fired when an update for the browser is available, but isn't installed immediately because a browser restart is required.","firefox":false,"mdn":"API:runtime/onBrowserUpdateAvailable","parameters":[],"permissions":[],"type":"event"},"runtime.onConnect":{"chrome":true,"description":"Fired when a connection is made from either an extension process or a content script.","firefox":true,"mdn":"API:runtime/onConnect","parameters":["port"],"permissions":[],"type":"event"},"runtime.onConnectExternal":{"chrome":true,"description":"Fired when a connection is made from another extension.","firefox":true,"mdn":"API:runtime/onConnectExternal","parameters":["port"],"permissions":[],"type":"event"},"runtime.onInstalled":{"chrome":true,"description":"Fired when the extension is first installed, when the extension is updated to a new version, and when the browser is updated to a new version.","firefox":true,"mdn":"API:runtime/onInstalled","parameters":["details"],"permissions":[],"type":"event"},"runtime.onMessage":{"chrome":true,"description":"Fired when a message is sent from either an extension process or a content script.","firefox":true,"mdn":"API:runtime/onMessage","parameters":["message","sender","sendResponse"],"permissions":[],"type":"event"},"runtime.onMessageExternal":{"chrome":true,"description":"Fired when a message is sent from another extension/app. Cannot be used in a content script.","firefox":true,"mdn":"API:runtime/onMessageExternal","parameters":["message","sender","sendResponse"],"permissions":[],"type":"event"},"runtime.onRestartRequired":{"chrome":true,"description":"Fired when an app or the device that it runs on needs to be restarted. The app should close all its windows at its earliest convenient time to let the restart to happen. If the app does nothing, a restart will be enforced after a 24-hour grace period has passed. Currently, this event is only fired for Chrome OS kiosk apps.","firefox":false,"mdn":"API:runtime/onRestartRequired","parameters":["reason"],"permissions":[],"type":"event"},"runtime.onStartup":{"chrome":true,"description":"Fired when a profile that has this extension installed first starts up. This event is not fired for incognito profiles.","firefox":true,"mdn":"API:runtime/onStartup","permissions":[],"type":"event"},"runtime.onSuspend":{"chrome":true,"description":"Sent to the event page just before it is unloaded. This gives the extension opportunity to do some clean up. Note that since the page is unloading, any asynchronous operations started while handling this event are not guaranteed to complete. If more activity for the event page occurs before it gets unloaded the onSuspendCanceled event will be sent and the page won't be unloaded. ","firefox":true,"mdn":"API:runtime/onSuspend","permissions":[],"type":"event"},"runtime.onSuspendCanceled":{"chrome":true,"description":"Sent after onSuspend to indicate that the app won't be unloaded after all.","firefox":true,"mdn":"API:runtime/onSuspendCanceled","permissions":[],"type":"event"},"runtime.onUpdateAvailable":{"chrome":true,"description":"Fired when an update is available, but isn't installed immediately because the app is currently running. If you do nothing, the update will be installed the next time the background page gets unloaded, if you want it to be installed sooner you can explicitly call runtime.reload. If your extension is using a persistent background page, the background page of course never gets unloaded, so unless you call runtime.reload manually in response to this event the update will not get installed until the next time the browser itself restarts. If no handlers are listening for this event, and your extension has a persistent background page, it behaves as if runtime.reload is called in response to this event.","firefox":true,"mdn":"API:runtime/onUpdateAvailable","parameters":["details"],"permissions":[],"type":"event"},"runtime.openOptionsPage":{"chrome":true,"description":"<p>Open your Extension's options page, if possible.</p><p>The precise behavior may depend on your manifest's <code>options_page</code> key, or what the browser happens to support at the time.</p><p>If your Extension does not declare an options page, or the browser failed to create one for some other reason, the callback will set lastError.</p>","firefox":true,"mdn":"API:runtime/openOptionsPage","parameters":["callback"],"permissions":[],"type":"function"},"runtime.reload":{"chrome":true,"description":"Reloads the app or extension.","firefox":true,"mdn":"API:runtime/reload","parameters":[],"permissions":[],"type":"function"},"runtime.requestUpdateCheck":{"chrome":true,"description":"Requests an update check for this app/extension.","firefox":false,"mdn":"API:runtime/requestUpdateCheck","parameters":["callback"],"permissions":[],"type":"function"},"runtime.restart":{"description":"Restart the device when the app runs in kiosk mode. Otherwise, it's no-op.","parameters":[],"permissions":[],"type":"function"},"runtime.sendMessage":{"chrome":true,"description":"Sends a single message to event listeners within your extension/app or a different extension/app. Similar to runtime.connect but only sends a single message, with an optional response. If sending to your extension, the runtime.onMessage event will be fired in each page, or runtime.onMessageExternal, if a different extension. Note that extensions cannot send messages to content scripts using this method. To send messages to content scripts, use tabs.sendMessage.","firefox":true,"mdn":"API:runtime/sendMessage","parameters":["extensionId","message","options","responseCallback"],"permissions":[],"type":"function"},"runtime.sendNativeMessage":{"chrome":true,"description":"Send a single message to a native application.","firefox":true,"mdn":"API:runtime/sendNativeMessage","parameters":["application","message","responseCallback"],"permissions":["nativeMessaging"],"type":"function"},"runtime.setUninstallURL":{"chrome":true,"description":"Sets the URL to be visited upon uninstallation. This may be used to clean up server-side data, do analytics, and implement surveys. Maximum 1023 characters.","firefox":true,"mdn":"API:runtime/setUninstallURL","parameters":["url","callback"],"permissions":[],"type":"function"},"scripting.executeScript":{"chrome":true,"description":"Injects a script into a target context. The script will be run at <code>document_idle</code>.","firefox":true,"mdn":"API:scripting/executeScript","parameters":["injection","callback"],"permissions":["scripting"],"type":"function"},"scripting.getRegisteredContentScripts":{"chrome":true,"description":"Returns all dynamically registered content scripts for this extension that match the given filter.","firefox":true,"mdn":"API:scripting/getRegisteredContentScripts","parameters":["filter","callback"],"permissions":["scripting"],"type":"function"},"scripting.insertCSS":{"chrome":true,"description":"Inserts a CSS stylesheet into a target context. If multiple frames are specified, unsuccessful injections are ignored.","firefox":true,"mdn":"API:scripting/insertCSS","parameters":["injection","callback"],"permissions":["scripting"],"type":"function"},"scripting.registerContentScripts":{"chrome":true,"description":"Registers one or more content scripts for this extension.","firefox":true,"mdn":"API:scripting/registerContentScripts","parameters":["scripts","callback"],"permissions":["scripting"],"type":"function"},"scripting.removeCSS":{"chrome":true,"description":"Removes a CSS stylesheet that was previously inserted by this extension from a target context.","firefox":true,"mdn":"API:scripting/removeCSS","parameters":["injection","callback"],"permissions":["scripting"],"type":"function"},"scripting.unregisterContentScripts":{"chrome":true,"description":"Unregisters one or more content scripts for this extension.","firefox":true,"mdn":"API:scripting/unregisterContentScripts","parameters":["filter","callback"],"permissions":["scripting"],"type":"function"},"scripting.updateContentScripts":{"chrome":true,"description":"Updates one or more content scripts for this extension.","firefox":true,"mdn":"API:scripting/updateContentScripts","parameters":["scripts","callback"],"permissions":["scripting"],"type":"function"},"search.get":{"chrome":false,"description":"Gets a list of search engines.","firefox":true,"mdn":"API:search/get","parameters":[],"permissions":["search"],"type":"function"},"search.query":{"chrome":true,"description":"Use the chrome.search API to search via the default provider.","firefox":true,"mdn":"API:search/query","parameters":["queryInfo","callback"],"permissions":["search"],"type":"function"},"search.search":{"chrome":false,"description":"Perform a search.","firefox":true,"mdn":"API:search/search","parameters":["searchProperties"],"permissions":["search"],"type":"function"},"sessions.forgetClosedTab":{"chrome":false,"description":"Forget a recently closed tab.","firefox":true,"mdn":"API:sessions/forgetClosedTab","parameters":["windowId","sessionId"],"permissions":["sessions"],"type":"function"},"sessions.forgetClosedWindow":{"chrome":false,"description":"Forget a recently closed window.","firefox":true,"mdn":"API:sessions/forgetClosedWindow","parameters":["sessionId"],"permissions":["sessions"],"type":"function"},"sessions.getDevices":{"description":"Retrieves all devices with synced sessions.","parameters":["filter","callback"],"permissions":["sessions"],"type":"function"},"sessions.getRecentlyClosed":{"chrome":true,"description":"Gets the list of recently closed tabs and/or windows.","firefox":true,"mdn":"API:sessions/getRecentlyClosed","parameters":["filter","callback"],"permissions":["sessions"],"type":"function"},"sessions.getTabValue":{"chrome":false,"description":"Retrieve a value that was set for a given key on a given tab.","firefox":true,"mdn":"API:sessions/getTabValue","parameters":["tabId","key"],"permissions":["sessions"],"type":"function"},"sessions.getWindowValue":{"chrome":false,"description":"Retrieve a value that was set for a given key on a given window.","firefox":true,"mdn":"API:sessions/getWindowValue","parameters":["windowId","key"],"permissions":["sessions"],"type":"function"},"sessions.onChanged":{"chrome":true,"description":"Fired when recently closed tabs and/or windows are changed. This event does not monitor synced sessions changes.","firefox":true,"mdn":"API:sessions/onChanged","permissions":["sessions"],"type":"event"},"sessions.removeTabValue":{"chrome":false,"description":"Remove a key/value pair that was set on a given tab.","firefox":true,"mdn":"API:sessions/removeTabValue","parameters":["tabId","key"],"permissions":["sessions"],"type":"function"},"sessions.removeWindowValue":{"chrome":false,"description":"Remove a key/value pair that was set on a given window.","firefox":true,"mdn":"API:sessions/removeWindowValue","parameters":["windowId","key"],"permissions":["sessions"],"type":"function"},"sessions.restore":{"chrome":true,"description":"Reopens a windows.Window or tabs.Tab, with an optional callback to run when the entry has been restored.","firefox":true,"mdn":"API:sessions/restore","parameters":["sessionId","callback"],"permissions":["sessions"],"type":"function"},"sessions.setTabValue":{"chrome":false,"description":"Set a key/value pair on a given tab.","firefox":true,"mdn":"API:sessions/setTabValue","parameters":["tabId","key","value"],"permissions":["sessions"],"type":"function"},"sessions.setWindowValue":{"chrome":false,"description":"Set a key/value pair on a given window.","firefox":true,"mdn":"API:sessions/setWindowValue","parameters":["windowId","key","value"],"permissions":["sessions"],"type":"function"},"sidebarAction.close":{"chrome":false,"description":"Closes the extension sidebar in the active window if the sidebar belongs to the extension.","firefox":true,"mdn":"API:sidebarAction/close","parameters":[],"permissions":["sidebar_action"],"type":"function"},"sidebarAction.getPanel":{"chrome":false,"description":"Gets the url to the html document set as the panel for this sidebar action.","firefox":true,"mdn":"API:sidebarAction/getPanel","parameters":["details"],"permissions":["sidebar_action"],"type":"function"},"sidebarAction.getTitle":{"chrome":false,"description":"Gets the title of the sidebar action.","firefox":true,"mdn":"API:sidebarAction/getTitle","parameters":["details"],"permissions":["sidebar_action"],"type":"function"},"sidebarAction.isOpen":{"chrome":false,"description":"Checks whether the sidebar action is open.","firefox":true,"mdn":"API:sidebarAction/isOpen","parameters":["details"],"permissions":["sidebar_action"],"type":"function"},"sidebarAction.open":{"chrome":false,"description":"Opens the extension sidebar in the active window.","firefox":true,"mdn":"API:sidebarAction/open","parameters":[],"permissions":["sidebar_action"],"type":"function"},"sidebarAction.setIcon":{"chrome":false,"description":"Sets the icon for the sidebar action. The icon can be specified either as the path to an image file or as the pixel data from a canvas element, or as dictionary of either one of those. Either the <strong>path</strong> or the <strong>imageData</strong> property must be specified.","firefox":true,"mdn":"API:sidebarAction/setIcon","parameters":["details"],"permissions":["sidebar_action"],"type":"function"},"sidebarAction.setPanel":{"chrome":false,"description":"Sets the url to the html document to be opened in the sidebar when the user clicks on the sidebar action's icon.","firefox":true,"mdn":"API:sidebarAction/setPanel","parameters":["details"],"permissions":["sidebar_action"],"type":"function"},"sidebarAction.setTitle":{"chrome":false,"description":"Sets the title of the sidebar action. This shows up in the tooltip.","firefox":true,"mdn":"API:sidebarAction/setTitle","parameters":["details"],"permissions":["sidebar_action"],"type":"function"},"sidebarAction.toggle":{"chrome":false,"description":"Toggles the extension sidebar in the active window.","firefox":true,"mdn":"API:sidebarAction/toggle","parameters":[],"permissions":["sidebar_action"],"type":"function"},"storage.onChanged":{"chrome":true,"description":"Fired when one or more items change.","firefox":true,"mdn":"API:storage/onChanged","parameters":["changes","areaName"],"permissions":["storage"],"type":"event"},"tabs.captureTab":{"chrome":false,"description":"Captures an area of a specified tab. You must have <all_urls> permission to use this method.","firefox":true,"mdn":"API:tabs/captureTab","parameters":["tabId","options"],"permissions":["<all_urls>"],"type":"function"},"tabs.captureVisibleTab":{"chrome":true,"description":"Captures an area of the currently active tab in the specified window. You must have <all_urls> permission to use this method.","firefox":true,"mdn":"API:tabs/captureVisibleTab","parameters":["windowId","options","callback"],"permissions":["<all_urls>"],"type":"function"},"tabs.connect":{"chrome":true,"description":"Connects to the content script(s) in the specified tab. The Content Script Messaging.","firefox":true,"mdn":"API:tabs/connect","parameters":["tabId","connectInfo"],"permissions":[],"type":"function"},"tabs.create":{"chrome":true,"description":"Creates a new tab.","firefox":true,"mdn":"API:tabs/create","parameters":["createProperties","callback"],"permissions":[],"type":"function"},"tabs.detectLanguage":{"chrome":true,"description":"Detects the primary language of the content in a tab.","firefox":true,"mdn":"API:tabs/detectLanguage","parameters":["tabId","callback"],"permissions":[],"type":"function"},"tabs.discard":{"chrome":true,"description":"discards one or more tabs.","firefox":true,"mdn":"API:tabs/discard","parameters":["tabIds"],"permissions":[],"type":"function"},"tabs.duplicate":{"chrome":true,"description":"Duplicates a tab.","firefox":true,"mdn":"API:tabs/duplicate","parameters":["tabId","duplicateProperties","callback"],"permissions":[],"type":"function"},"tabs.executeScript":{"chrome":true,"description":"Injects JavaScript code into a page. For details, see the programmatic injection section of the content scripts doc.","firefox":true,"mdn":"API:tabs/executeScript","parameters":["tabId","details","callback"],"permissions":[],"type":"function"},"tabs.get":{"chrome":true,"description":"Retrieves details about the specified tab.","firefox":true,"mdn":"API:tabs/get","parameters":["tabId","callback"],"permissions":[],"type":"function"},"tabs.getCurrent":{"chrome":true,"description":"Gets the tab that this script call is being made from. May be undefined if called from a non-tab context (for example: a background page or popup view).","firefox":true,"mdn":"API:tabs/getCurrent","parameters":["callback"],"permissions":[],"type":"function"},"tabs.getZoom":{"chrome":true,"description":"Gets the current zoom factor of a specified tab.","firefox":true,"mdn":"API:tabs/getZoom","parameters":["tabId","callback"],"permissions":[],"type":"function"},"tabs.getZoomSettings":{"chrome":true,"description":"Gets the current zoom settings of a specified tab.","firefox":true,"mdn":"API:tabs/getZoomSettings","parameters":["tabId","callback"],"permissions":[],"type":"function"},"tabs.goBack":{"chrome":true,"description":"Navigate to previous page in tab's history, if available.","firefox":true,"mdn":"API:tabs/goBack","parameters":["tabId","callback"],"permissions":[],"type":"function"},"tabs.goForward":{"chrome":true,"description":"Navigate to next page in tab's history, if available","firefox":true,"mdn":"API:tabs/goForward","parameters":["tabId","callback"],"permissions":[],"type":"function"},"tabs.hide":{"chrome":false,"description":"Hides one or more tabs. The <code>\"tabHide\"</code> permission is required to hide tabs.  Not all tabs are hidable.  Returns an array of hidden tabs.","firefox":true,"mdn":"API:tabs/hide","parameters":["tabIds"],"permissions":["tabHide"],"type":"function"},"tabs.highlight":{"chrome":true,"description":"Highlights the given tabs.","firefox":true,"mdn":"API:tabs/highlight","parameters":["highlightInfo","callback"],"permissions":[],"type":"function"},"tabs.insertCSS":{"chrome":true,"description":"Injects CSS into a page. For details, see the programmatic injection section of the content scripts doc.","firefox":true,"mdn":"API:tabs/insertCSS","parameters":["tabId","details","callback"],"permissions":[],"type":"function"},"tabs.move":{"chrome":true,"description":"Moves one or more tabs to a new position within its window, or to a new window. Note that tabs can only be moved to and from normal (window.type === \"normal\") windows.","firefox":true,"mdn":"API:tabs/move","parameters":["tabIds","moveProperties","callback"],"permissions":[],"type":"function"},"tabs.moveInSuccession":{"chrome":false,"description":"Removes an array of tabs from their lines of succession and prepends or appends them in a chain to another tab.","firefox":true,"mdn":"API:tabs/moveInSuccession","parameters":["tabIds","tabId","options"],"permissions":[],"type":"function"},"tabs.onActivated":{"chrome":true,"description":"Fires when the active tab in a window changes. Note that the tab's URL may not be set at the time this event fired, but you can listen to onUpdated events to be notified when a URL is set.","firefox":true,"mdn":"API:tabs/onActivated","parameters":["activeInfo"],"permissions":[],"type":"event"},"tabs.onAttached":{"chrome":true,"description":"Fired when a tab is attached to a window, for example because it was moved between windows.","firefox":true,"mdn":"API:tabs/onAttached","parameters":["tabId","attachInfo"],"permissions":[],"type":"event"},"tabs.onCreated":{"chrome":true,"description":"Fired when a tab is created. Note that the tab's URL may not be set at the time this event fired, but you can listen to onUpdated events to be notified when a URL is set.","firefox":true,"mdn":"API:tabs/onCreated","parameters":["tab"],"permissions":[],"type":"event"},"tabs.onDetached":{"chrome":true,"description":"Fired when a tab is detached from a window, for example because it is being moved between windows.","firefox":true,"mdn":"API:tabs/onDetached","parameters":["tabId","detachInfo"],"permissions":[],"type":"event"},"tabs.onHighlighted":{"chrome":true,"description":"Fired when the highlighted or selected tabs in a window changes.","firefox":true,"mdn":"API:tabs/onHighlighted","parameters":["highlightInfo"],"permissions":[],"type":"event"},"tabs.onMoved":{"chrome":true,"description":"Fired when a tab is moved within a window. Only one move event is fired, representing the tab the user directly moved. Move events are not fired for the other tabs that must move in response. This event is not fired when a tab is moved between windows. For that, see tabs.onDetached.","firefox":true,"mdn":"API:tabs/onMoved","parameters":["tabId","moveInfo"],"permissions":[],"type":"event"},"tabs.onRemoved":{"chrome":true,"description":"Fired when a tab is closed.","firefox":true,"mdn":"API:tabs/onRemoved","parameters":["tabId","removeInfo"],"permissions":[],"type":"event"},"tabs.onReplaced":{"chrome":true,"description":"Fired when a tab is replaced with another tab due to prerendering or instant.","firefox":false,"mdn":"API:tabs/onReplaced","parameters":["addedTabId","removedTabId"],"permissions":[],"type":"event"},"tabs.onUpdated":{"chrome":true,"description":"Fired when a tab is updated.","firefox":true,"mdn":"API:tabs/onUpdated","parameters":["tabId","changeInfo","tab"],"permissions":[],"type":"event"},"tabs.onZoomChange":{"chrome":true,"description":"Fired when a tab is zoomed.","firefox":true,"mdn":"API:tabs/onZoomChange","parameters":["ZoomChangeInfo"],"permissions":[],"type":"event"},"tabs.print":{"chrome":false,"description":"Prints page in active tab.","firefox":true,"mdn":"API:tabs/print","parameters":[],"permissions":[],"type":"function"},"tabs.printPreview":{"chrome":false,"description":"Shows print preview for page in active tab.","firefox":true,"mdn":"API:tabs/printPreview","parameters":["callback"],"permissions":[],"type":"function"},"tabs.query":{"chrome":true,"description":"Gets all tabs that have the specified properties, or all tabs if no properties are specified.","firefox":true,"mdn":"API:tabs/query","parameters":["queryInfo","callback"],"permissions":[],"type":"function"},"tabs.reload":{"chrome":true,"description":"Reload a tab.","firefox":true,"mdn":"API:tabs/reload","parameters":["tabId","reloadProperties","callback"],"permissions":[],"type":"function"},"tabs.remove":{"chrome":true,"description":"Closes one or more tabs.","firefox":true,"mdn":"API:tabs/remove","parameters":["tabIds","callback"],"permissions":[],"type":"function"},"tabs.removeCSS":{"chrome":true,"description":"Removes injected CSS from a page. For details, see the programmatic injection section of the content scripts doc.","firefox":true,"mdn":"API:tabs/removeCSS","parameters":["tabId","details","callback"],"permissions":[],"type":"function"},"tabs.saveAsPDF":{"chrome":false,"description":"Saves page in active tab as a PDF file.","firefox":true,"mdn":"API:tabs/saveAsPDF","parameters":["pageSettings","callback"],"permissions":[],"type":"function"},"tabs.sendMessage":{"chrome":true,"description":"Sends a single message to the content script(s) in the specified tab, with an optional callback to run when a response is sent back.  The runtime.onMessage event is fired in each content script running in the specified tab for the current extension.","firefox":true,"mdn":"API:tabs/sendMessage","parameters":["tabId","message","options","responseCallback"],"permissions":[],"type":"function"},"tabs.setZoom":{"chrome":true,"description":"Zooms a specified tab.","firefox":true,"mdn":"API:tabs/setZoom","parameters":["tabId","zoomFactor","callback"],"permissions":[],"type":"function"},"tabs.setZoomSettings":{"chrome":true,"description":"Sets the zoom settings for a specified tab, which define how zoom changes are handled. These settings are reset to defaults upon navigating the tab.","firefox":false,"mdn":"API:tabs/setZoomSettings","parameters":["tabId","zoomSettings","callback"],"permissions":[],"type":"function"},"tabs.show":{"chrome":false,"description":"Shows one or more tabs.","firefox":true,"mdn":"API:tabs/show","parameters":["tabIds"],"permissions":["tabHide"],"type":"function"},"tabs.toggleReaderMode":{"chrome":false,"description":"Toggles reader mode for the document in the tab.","firefox":true,"mdn":"API:tabs/toggleReaderMode","parameters":["tabId"],"permissions":[],"type":"function"},"tabs.update":{"chrome":true,"description":"Modifies the properties of a tab. Properties that are not specified in <var>updateProperties</var> are not modified.","firefox":true,"mdn":"API:tabs/update","parameters":["tabId","updateProperties","callback"],"permissions":[],"type":"function"},"tabs.warmup":{"chrome":false,"description":"Warm up a tab","firefox":true,"mdn":"API:tabs/warmup","parameters":["tabId"],"permissions":[],"type":"function"},"telemetry.canUpload":{"description":"Checks if Telemetry upload is enabled.","parameters":[],"permissions":["telemetry"],"type":"function"},"telemetry.keyedScalarAdd":{"description":"Adds the value to the given keyed scalar.","parameters":["name","key","value"],"permissions":["telemetry"],"type":"function"},"telemetry.keyedScalarSet":{"description":"Sets the keyed scalar to the given value. Throws if the value type doesn't match the scalar type.","parameters":["name","key","value"],"permissions":["telemetry"],"type":"function"},"telemetry.keyedScalarSetMaximum":{"description":"Sets the keyed scalar to the maximum of the current and the passed value","parameters":["name","key","value"],"permissions":["telemetry"],"type":"function"},"telemetry.recordEvent":{"description":"Record an event in Telemetry. Throws when trying to record an unknown event.","parameters":["category","method","object","value","extra"],"permissions":["telemetry"],"type":"function"},"telemetry.registerEvents":{"description":"Register new events to record them from addons. See nsITelemetry.idl for more details.","parameters":["category","data"],"permissions":["telemetry"],"type":"function"},"telemetry.registerScalars":{"description":"Register new scalars to record them from addons. See nsITelemetry.idl for more details.","parameters":["category","data"],"permissions":["telemetry"],"type":"function"},"telemetry.scalarAdd":{"description":"Adds the value to the given scalar.","parameters":["name","value"],"permissions":["telemetry"],"type":"function"},"telemetry.scalarSet":{"description":"Sets the named scalar to the given value. Throws if the value type doesn't match the scalar type.","parameters":["name","value"],"permissions":["telemetry"],"type":"function"},"telemetry.scalarSetMaximum":{"description":"Sets the scalar to the maximum of the current and the passed value","parameters":["name","value"],"permissions":["telemetry"],"type":"function"},"telemetry.setEventRecordingEnabled":{"description":"Enable recording of events in a category. Events default to recording disabled. This allows to toggle recording for all events in the specified category.","parameters":["category","enabled"],"permissions":["telemetry"],"type":"function"},"telemetry.submitEncryptedPing":{"description":"Submits a custom ping to the Telemetry back-end, with an encrypted payload. Requires a telemetry entry in the manifest to be used.","parameters":["message","options"],"permissions":["telemetry"],"type":"function"},"telemetry.submitPing":{"description":"Submits a custom ping to the Telemetry back-end. See <code>submitExternalPing</code> inside TelemetryController.sys.mjs for more details.","parameters":["type","message","options"],"permissions":["telemetry"],"type":"function"},"test.assertBool":{"parameters":["test","expected","message"],"permissions":[],"type":"function"},"test.assertDeepEq":{"parameters":["expected","actual","message"],"permissions":[],"type":"function"},"test.assertEq":{"parameters":["expected","actual","message"],"permissions":[],"type":"function"},"test.assertFalse":{"parameters":["test","message"],"permissions":[],"type":"function"},"test.assertLastError":{"parameters":["expectedError"],"permissions":[],"type":"function"},"test.assertNoLastError":{"parameters":[],"permissions":[],"type":"function"},"test.assertRejects":{"parameters":["promise","expectedError","message"],"permissions":[],"type":"function"},"test.assertThrows":{"parameters":["func","expectedError","message"],"permissions":[],"type":"function"},"test.assertTrue":{"parameters":["test","message"],"permissions":[],"type":"function"},"test.fail":{"parameters":["message"],"permissions":[],"type":"function"},"test.log":{"description":"Logs a message during internal unit testing.","parameters":["message"],"permissions":[],"type":"function"},"test.notifyFail":{"description":"Notifies the browser process that test code running in the extension failed.  This is only used for internal unit testing.","parameters":["message"],"permissions":[],"type":"function"},"test.notifyPass":{"description":"Notifies the browser process that test code running in the extension passed.  This is only used for internal unit testing.","parameters":["message"],"permissions":[],"type":"function"},"test.onMessage":{"description":"Used to test sending messages to extensions.","parameters":["message","argument"],"permissions":[],"type":"event"},"test.sendMessage":{"description":"Sends a string message to the browser process, generating a Notification that C++ test code can wait for.","parameters":["arg1","arg2"],"permissions":[],"type":"function"},"test.succeed":{"parameters":["message"],"permissions":[],"type":"function"},"test.withHandlingUserInput":{"description":"Calls the callback function wrapped with user input set.  This is only used for internal unit testing.","parameters":["callback"],"permissions":[],"type":"function"},"theme.getCurrent":{"chrome":false,"description":"Returns the current theme for the specified window or the last focused window.","firefox":true,"mdn":"API:theme/getCurrent","parameters":["windowId"],"permissions":[],"type":"function"},"theme.onUpdated":{"chrome":false,"description":"Fired when a new theme has been applied","firefox":true,"mdn":"API:theme/onUpdated","parameters":["updateInfo"],"permissions":[],"type":"event"},"theme.reset":{"chrome":false,"description":"Removes the updates made to the theme.","firefox":true,"mdn":"API:theme/reset","parameters":["windowId"],"permissions":["theme"],"type":"function"},"theme.update":{"chrome":false,"description":"Make complete updates to the theme. Resolves when the update has completed.","firefox":true,"mdn":"API:theme/update","parameters":["windowId","details"],"permissions":["theme"],"type":"function"},"topSites.get":{"chrome":true,"description":"Gets a list of top sites.","firefox":true,"mdn":"API:topSites/get","parameters":["options","callback"],"permissions":["topSites"],"type":"function"},"urlbar.closeView":{"description":"Closes the urlbar view in the current window.","parameters":[],"permissions":["urlbar"],"type":"function"},"urlbar.focus":{"description":"Focuses the urlbar in the current window.","parameters":["select"],"permissions":["urlbar"],"type":"function"},"urlbar.onBehaviorRequested":{"description":"Before a query starts, this event is fired for the given provider. Its purpose is to request the provider's behavior for the query. The listener should return a behavior in response. By default, providers are inactive, so if your provider should always be inactive, you don't need to listen for this event.","parameters":["query"],"permissions":["urlbar"],"type":"event"},"urlbar.onEngagement":{"description":"This event is fired when the user starts and ends an engagement with the urlbar.","parameters":["state"],"permissions":["urlbar"],"type":"event"},"urlbar.onQueryCanceled":{"description":"This event is fired for the given provider when a query is canceled. The listener should stop any ongoing fetch or creation of results and clean up its resources.","parameters":["query"],"permissions":["urlbar"],"type":"event"},"urlbar.onResultPicked":{"description":"Typically, a provider includes a <code>url</code> property in its results' payloads. When the user picks a result with a URL, Firefox automatically loads the URL. URLs don't make sense for every result type, however. When the user picks a result without a URL, this event is fired. The provider should take an appropriate action in response. Currently the only applicable <code>ResultTypes</code> are <code>dynamic</code> and <code>tip</code>.","parameters":["payload","elementName"],"permissions":["urlbar"],"type":"event"},"urlbar.onResultsRequested":{"description":"When a query starts, this event is fired for the given provider if the provider is active for the query and there are no other providers that are restricting. Its purpose is to request the provider's results for the query. The listener should return a list of results in response.","parameters":["query"],"permissions":["urlbar"],"type":"event"},"urlbar.search":{"description":"Starts a search in the urlbar in the current window.","parameters":["searchString","options"],"permissions":["urlbar"],"type":"function"},"userScripts.onBeforeScript":{"chrome":false,"description":"Event called when a new userScript global has been created","firefox":true,"mdn":"API:userScripts/onBeforeScript","parameters":["userScript"],"permissions":["user_scripts","user_scripts.api_script"],"type":"event"},"userScripts.register":{"chrome":false,"description":"Register a user script programmatically given its userScripts.UserScriptOptions, and resolves to a userScripts.RegisteredUserScript instance","firefox":true,"mdn":"API:userScripts/register","parameters":["userScriptOptions"],"permissions":["user_scripts"],"type":"function"},"webNavigation.getAllFrames":{"chrome":true,"description":"Retrieves information about all frames of a given tab.","firefox":true,"mdn":"API:webNavigation/getAllFrames","parameters":["details","callback"],"permissions":["webNavigation"],"type":"function"},"webNavigation.getFrame":{"chrome":true,"description":"Retrieves information about the given frame. A frame refers to an <iframe> or a <frame> of a web page and is identified by a tab ID and a frame ID.","firefox":true,"mdn":"API:webNavigation/getFrame","parameters":["details","callback"],"permissions":["webNavigation"],"type":"function"},"webNavigation.onBeforeNavigate":{"chrome":true,"description":"Fired when a navigation is about to occur.","firefox":true,"mdn":"API:webNavigation/onBeforeNavigate","parameters":["details"],"permissions":["webNavigation"],"type":"event"},"webNavigation.onCommitted":{"chrome":true,"description":"Fired when a navigation is committed. The document (and the resources it refers to, such as images and subframes) might still be downloading, but at least part of the document has been received from the server and the browser has decided to switch to the new document.","firefox":true,"mdn":"API:webNavigation/onCommitted","parameters":["details"],"permissions":["webNavigation"],"type":"event"},"webNavigation.onCompleted":{"chrome":true,"description":"Fired when a document, including the resources it refers to, is completely loaded and initialized.","firefox":true,"mdn":"API:webNavigation/onCompleted","parameters":["details"],"permissions":["webNavigation"],"type":"event"},"webNavigation.onCreatedNavigationTarget":{"chrome":true,"description":"Fired when a new window, or a new tab in an existing window, is created to host a navigation.","firefox":true,"mdn":"API:webNavigation/onCreatedNavigationTarget","parameters":["details"],"permissions":["webNavigation"],"type":"event"},"webNavigation.onDOMContentLoaded":{"chrome":true,"description":"Fired when the page's DOM is fully constructed, but the referenced resources may not finish loading.","firefox":true,"mdn":"API:webNavigation/onDOMContentLoaded","parameters":["details"],"permissions":["webNavigation"],"type":"event"},"webNavigation.onErrorOccurred":{"chrome":true,"description":"Fired when an error occurs and the navigation is aborted. This can happen if either a network error occurred, or the user aborted the navigation.","firefox":true,"mdn":"API:webNavigation/onErrorOccurred","parameters":["details"],"permissions":["webNavigation"],"type":"event"},"webNavigation.onHistoryStateUpdated":{"chrome":true,"description":"Fired when the frame's history was updated to a new URL. All future events for that frame will use the updated URL.","firefox":true,"mdn":"API:webNavigation/onHistoryStateUpdated","parameters":["details"],"permissions":["webNavigation"],"type":"event"},"webNavigation.onReferenceFragmentUpdated":{"chrome":true,"description":"Fired when the reference fragment of a frame was updated. All future events for that frame will use the updated URL.","firefox":true,"mdn":"API:webNavigation/onReferenceFragmentUpdated","parameters":["details"],"permissions":["webNavigation"],"type":"event"},"webNavigation.onTabReplaced":{"chrome":true,"description":"Fired when the contents of the tab is replaced by a different (usually previously pre-rendered) tab.","firefox":true,"mdn":"API:webNavigation/onTabReplaced","parameters":["details"],"permissions":["webNavigation"],"type":"event"},"webRequest.filterResponseData":{"chrome":false,"firefox":true,"mdn":"API:webRequest/filterResponseData","parameters":["requestId"],"permissions":["webRequest","webRequestBlocking"],"type":"function"},"webRequest.getSecurityInfo":{"chrome":false,"description":"Retrieves the security information for the request.  Returns a promise that will resolve to a SecurityInfo object.","firefox":true,"mdn":"API:webRequest/getSecurityInfo","parameters":["requestId","options"],"permissions":["webRequest"],"type":"function"},"webRequest.handlerBehaviorChanged":{"chrome":true,"description":"Needs to be called when the behavior of the webRequest handlers has changed to prevent incorrect handling due to caching. This function call is expensive. Don't call it often.","firefox":true,"mdn":"API:webRequest/handlerBehaviorChanged","parameters":["callback"],"permissions":["webRequest"],"type":"function"},"webRequest.onAuthRequired":{"chrome":true,"description":"Fired when an authentication failure is received. The listener has three options: it can provide authentication credentials, it can cancel the request and display the error page, or it can take no action on the challenge. If bad user credentials are provided, this may be called multiple times for the same request.","firefox":true,"mdn":"API:webRequest/onAuthRequired","parameters":["details","callback"],"permissions":["webRequest"],"type":"event"},"webRequest.onBeforeRedirect":{"chrome":true,"description":"Fired when a server-initiated redirect is about to occur.","firefox":true,"mdn":"API:webRequest/onBeforeRedirect","parameters":["details"],"permissions":["webRequest"],"type":"event"},"webRequest.onBeforeRequest":{"chrome":true,"description":"Fired when a request is about to occur.","firefox":true,"mdn":"API:webRequest/onBeforeRequest","parameters":["details"],"permissions":["webRequest"],"type":"event"},"webRequest.onBeforeSendHeaders":{"chrome":true,"description":"Fired before sending an HTTP request, once the request headers are available. This may occur after a TCP connection is made to the server, but before any HTTP data is sent. ","firefox":true,"mdn":"API:webRequest/onBeforeSendHeaders","parameters":["details"],"permissions":["webRequest"],"type":"event"},"webRequest.onCompleted":{"chrome":true,"description":"Fired when a request is completed.","firefox":true,"mdn":"API:webRequest/onCompleted","parameters":["details"],"permissions":["webRequest"],"type":"event"},"webRequest.onErrorOccurred":{"chrome":true,"description":"Fired when an error occurs.","firefox":true,"mdn":"API:webRequest/onErrorOccurred","parameters":["details"],"permissions":["webRequest"],"type":"event"},"webRequest.onHeadersReceived":{"chrome":true,"description":"Fired when HTTP response headers of a request have been received.","firefox":true,"mdn":"API:webRequest/onHeadersReceived","parameters":["details"],"permissions":["webRequest"],"type":"event"},"webRequest.onResponseStarted":{"chrome":true,"description":"Fired when the first byte of the response body is received. For HTTP requests, this means that the status line and response headers are available.","firefox":true,"mdn":"API:webRequest/onResponseStarted","parameters":["details"],"permissions":["webRequest"],"type":"event"},"webRequest.onSendHeaders":{"chrome":true,"description":"Fired just before a request is going to be sent to the server (modifications of previous onBeforeSendHeaders callbacks are visible by the time onSendHeaders is fired).","firefox":true,"mdn":"API:webRequest/onSendHeaders","parameters":["details"],"permissions":["webRequest"],"type":"event"},"windows.create":{"chrome":true,"description":"Creates (opens) a new browser with any optional sizing, position or default URL provided.","firefox":true,"mdn":"API:windows/create","parameters":["createData","callback"],"permissions":[],"type":"function"},"windows.get":{"chrome":true,"description":"Gets details about a window.","firefox":true,"mdn":"API:windows/get","parameters":["windowId","getInfo","callback"],"permissions":[],"type":"function"},"windows.getAll":{"chrome":true,"description":"Gets all windows.","firefox":true,"mdn":"API:windows/getAll","parameters":["getInfo","callback"],"permissions":[],"type":"function"},"windows.getCurrent":{"chrome":true,"description":"Gets the current window.","firefox":true,"mdn":"API:windows/getCurrent","parameters":["getInfo","callback"],"permissions":[],"type":"function"},"windows.getLastFocused":{"chrome":true,"description":"Gets the window that was most recently focused — typically the window 'on top'.","firefox":true,"mdn":"API:windows/getLastFocused","parameters":["getInfo","callback"],"permissions":[],"type":"function"},"windows.onCreated":{"chrome":true,"description":"Fired when a window is created.","firefox":true,"mdn":"API:windows/onCreated","parameters":["window"],"permissions":[],"type":"event"},"windows.onFocusChanged":{"chrome":true,"description":"Fired when the currently focused window changes. Will be windows.WINDOW_ID_NONE if all browser windows have lost focus. Note: On some Linux window managers, WINDOW_ID_NONE will always be sent immediately preceding a switch from one browser window to another.","firefox":true,"mdn":"API:windows/onFocusChanged","parameters":["windowId"],"permissions":[],"type":"event"},"windows.onRemoved":{"chrome":true,"description":"Fired when a window is removed (closed).","firefox":true,"mdn":"API:windows/onRemoved","parameters":["windowId"],"permissions":[],"type":"event"},"windows.remove":{"chrome":true,"description":"Removes (closes) a window, and all the tabs inside it.","firefox":true,"mdn":"API:windows/remove","parameters":["windowId","callback"],"permissions":[],"type":"function"},"windows.update":{"chrome":true,"description":"Updates the properties of a window. Specify only the properties that you want to change; unspecified properties will be left unchanged.","firefox":true,"mdn":"API:windows/update","parameters":["windowId","updateInfo","callback"],"permissions":[],"type":"function"}}